/*
Player Controller
Handles player-related functionalities and interactions.
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Hud.fcc" as Hud
import "Economy.fcc" as Economy
import "Player.fcc" as Player
import "Combat.fcc" as Combat
import "../Global/GlobalManager/GlobalCurrencyManager.fcg" as GlobalCurrencyManager
import "Items.fcc" as Items
import "Strings.fcc" as Strings
import "List.fcc" as List
import "./PlayerUtils.fcg" as PlayerUtils
import "../Global/GlobalData/CombatRoundCounter.fcg" as CombatRoundCounter
import "LevelObject.fcc" as LevelObject
graph PlayerController {
    playerShopHUD entity<BuiltInUI>; // Variable to hold the player's shop HUD

    //Executed when entity is created
    event OnAwake() {
        SetDropStatus(thisEntity as entity<Player>, false)
        thisEntity<Player>.IsDropOnEliminated = false
    }

    /* When a player is eliminated:
       - Remove all drop items
       - As SetDropStatus is true in order to keep player's weapons, items other than weapons are manually deleted using RemoveAllDropItems()
    */
    event OnPlayerBeEliminated(player entity<Player>) {
        if(player == thisEntity) {
            player<PlayerUtils>.RemoveAllDropItems(player);
        }
    }

    // Two events below are used when player drop a item (weapon or attachments or other healing tools), when they buy weapons in the shop or drop them directly from their backpacks
    /*
         When a player drops a weapon:
         - Destroy the weapon entity
         - As there are attachments in the weapon, they are deleted also
         - This is used when a player drops a weapon from their inventory or shop
    */
    event OnDropWeapon(weapon entity<Weapon>) {
        Destroy(weapon)
    }

    /*
    When a player drops a consumable item:
    - Destroy the consumable item entity
    - This is used when a player drops a consumable item from their inventory or shop
    */
    event OnDropConsumable(consumableID ItemIDType, item entity<Entity>) {
        Destroy(item)
    }

    /* 
    Deprecated, no use
     When a player eliminates another player:
    - If it is headshot, reward the player with extra currency (1500)
    - Else, reward 1000
    */
    // event OnEliminate(target entity<Entity>, damagedBodyPart DamagedBodyPartType) {
    //     // globalEntity<GlobalCurrencyManager>.AddCurrencyWhenEliminate(thisEntity as entity<Player>, damagedBodyPart) // Add currency when a player eliminates another player    
    // }

    /*
    Sets the player's shop HUD.
    @param shop: The shop HUD entity to set
    */
    func SetPlayerShopHUD(shop entity<BuiltInUI>) {
        playerShopHUD = shop; // Store the shop HUD in the global variable
    }

    /* Debug function for testing */
    func hehe(){
        LogInfo("Hehe");
    }

    // PLAYER FUNCTIONS
    /*
    This function sets the player's gravity to zero so that the terrains can be loaded properly.
    @param player: The player entity to modify
    */
    func SetZeroGravityStatus(player entity<Player>, status bool) {
        if (status) {
            player<Player>.Gravity = 0.0 // Set gravity to zero
            // LogInfo("<GlobalGameManager.fcg>: Zero gravity set for player: " + player<Entity>.Name) // Debug Info
        } else {
            player<Player>.Gravity = -9.81 // Reset gravity to default
            // LogInfo("<GlobalGameManager.fcg>: Gravity reset for player: " + player<Entity>.Name) // Debug Info
        }
    }
    /*
    This function adds an item to the player's inventory, and logs the action.
    @param player: The player entity to which the item will be added
    @param item: The item to be added, specified by its ID
    */
    func AddItemToPlayer(player entity<Player>, item EResItem, amount int) {
        if(item == EResItem.HelmetLv3) {
            DestroyEquipment(player, EquipmentType.Helmet, 1, out var destroyedHelmet) // Destroy the existing helmet if it is level 3
        }
        if(item == EResItem.VestLv3) {
            DestroyEquipment(player, EquipmentType.Vest, 1, out var destroyedVest) // Destroy the existing vest if it is level 3
        }
        AddItem(player, item as ItemIDType, amount, out var newItem) // Adds the specified amount of items to the player
        // LogInfo("Added item to player: " + player<Entity>.Name) //Debug Info
    }

    // MOVED TO GlobalPreparationPhaseManager.fcg in InitPlayerWeapons() also
    // func AddMedKitEachRound(player entity<Player>) {
    //     if GetItemCount(player, EResItem.MedKit as ItemIDType) != 0 {
    //         DestroyItem(player, EResItem.MedKit as ItemIDType, GetItemCount(player, EResItem.MedKit as ItemIDType)) // Destroy the item when added
    //     }
    //     AddItem(player, EResItem.MedKit as ItemIDType, 2, out var newItem) // Add the item to the player
    // }
}