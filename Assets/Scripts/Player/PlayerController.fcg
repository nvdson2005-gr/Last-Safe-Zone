import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Hud.fcc" as Hud
import "Economy.fcc" as Economy
import "Player.fcc" as Player
import "Combat.fcc" as Combat
import "../Global/GlobalManager/GlobalCurrencyManager.fcg" as GlobalCurrencyManager
import "Items.fcc" as Items
import "Strings.fcc" as Strings
import "List.fcc" as List
import "./PlayerUtils.fcg" as PlayerUtils
graph PlayerController {
    playerShopHUD entity<BuiltInUI>; // Variable to hold the player's shop HUD
    //Executed when entity is created
    event OnAwake() {
        SetDropStatus(thisEntity as entity<Player>, false)
    }
    // event OnDropConsumable(consumableID ItemIDType, item entity<Entity>) {
    //     DestroyItem(thisEntity as entity<Player>, consumableID, GetItemCount(thisEntity as entity<Player>, consumableID)) // Destroy the item when dropped;
    // }
    event OnDropWeapon(weapon entity<Weapon>) {
    }

    // Remove all drop items when player is eliminated
    event OnPlayerBeEliminated(player entity<Player>) {
        if(player == thisEntity) {
            player<PlayerUtils>.RemoveAllDropItems(player);
        }
    }
    /* 
    Deprecated, no use
     When a player eliminates another player:
    - If it is headshot, reward the player with extra currency (1500)
    - Else, reward 1000
    */
    event OnEliminate(target entity<Entity>, damagedBodyPart DamagedBodyPartType) {
        // globalEntity<GlobalCurrencyManager>.AddCurrencyWhenEliminate(thisEntity as entity<Player>, damagedBodyPart) // Add currency when a player eliminates another player    
    }
    func SetPlayerShopHUD(shop entity<BuiltInUI>) {
        playerShopHUD = shop; // Store the shop HUD in the global variable
    }
    // func SetInvincibility(player entity<Player>, invincible bool) {
    //     LogInfo("Hehe");
    //     player<Player>.Invincible = invincible;
    // }
    func hehe(){
        LogInfo("Hehe");
    }
}