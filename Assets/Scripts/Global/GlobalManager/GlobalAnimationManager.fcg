import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Playable.fcc" as Playable
import "Hud.fcc" as Hud
import "Map.fcc" as Map
import "Economy.fcc" as Economy
import "Player.fcc" as Player
import "Convert.fcc" as Convert
graph GlobalAnimationManager {
    async func DOIncreaseTween(widget entity<UIWidget>){
        var defaultPos = widget<UIWidget>.AnchorPosition
        widget<UIWidgetLabel>.Alpha = 1.0
        CreateTween(widget, UIWidget.AnchorPosition, Vector2{defaultPos.X, defaultPos.Y}, Vector2{defaultPos.X, defaultPos.Y + 50}, TweenStyle.Once, CreateCurve(List<float>{0, 0, 1, 1}), 4000, out var moveTween, true)
        CreateTween(widget, UIWidgetLabel.Alpha, 1.0, 0.0, TweenStyle.Once, CreateCurve(List<float>{0, 0, 1, 1}), 4000, out var alphaReverseTween, true)
        WaitForMillisecond(4000)
        // LogError(defaultPos)
        Destroy(moveTween)
        Destroy(alphaReverseTween)
        widget<Transform>.LocalPosition = defaultPos
    }

    async func DOIncreaseTweenFullScoreBoard(scoreWidget entity<UIWidget>, increaseUIWidget entity<UIWidget>, increaseTo int){
        var defaultPos = increaseUIWidget<UIWidget>.AnchorPosition
        increaseUIWidget<UIWidgetLabel>.Alpha = 1.0
        CreateTween(increaseUIWidget, UIWidget.AnchorPosition, Vector2{defaultPos.X, defaultPos.Y}, Vector2{defaultPos.X - 50, defaultPos.Y}, TweenStyle.Once, CreateCurve(List<float>{0, 0, 1, 1}), 3000, out var moveTween, true)
        CreateTween(increaseUIWidget, UIWidgetLabel.Alpha, 1.0, 0.0, TweenStyle.Once, CreateCurve(List<float>{0, 0, 1, 1}), 3000, out var alphaReverseTween, true)
        WaitForMillisecond(2000)
        // Update the score widget to reflect the new score after the animation
        scoreWidget<UIWidgetLabel>.Content = ToString(increaseTo) 
        WaitForMillisecond(1000)
        // LogError(defaultPos)
        Destroy(moveTween)
        Destroy(alphaReverseTween)
        increaseUIWidget<Transform>.LocalPosition = defaultPos
    }

    async func DOChangeColor(widget entity<UIWidget>, fromColor Color, toColor Color, duration int){
        CreateTween(widget, UIWidgetImage.Color, fromColor, toColor, TweenStyle.Once, CreateCurve(List<float>{0, 0, 1, 1}), duration, out var colorTween, true)
        WaitForMillisecond(duration)
        Destroy(colorTween)
    }
}