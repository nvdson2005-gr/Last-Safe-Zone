/* 
Global Preparation Phase Manager
Handles all the neccessary actions in Before Combat phase, including setting invincibility and move status for players,
together with teleport players to their designated starting positions.
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Player.fcc" as Player
import "Workflow.fcc" as Workflow
import "../GlobalData/PlayersTimerUI.fcg" as PlayersTimerUI
import "Collection.fcc" as Collection
import "../GlobalData/SpawnPoints.fcg" as SpawnPoints
import "Math.fcc" as Math
import "Strings.fcc" as Strings
import "List.fcc" as List
import "../GlobalData/PlayersShopIcon.fcg" as PlayersShopIcon
import "../GlobalManager/GlobalGameManager.fcg" as GlobalGameManager
import "Items.fcc" as Items
import "../GlobalData/CombatRoundCounter.fcg" as CombatRoundCounter
import "../../Player/PlayerController.fcg" as PlayerController
import "../GlobalManager/GlobalUIManager.fcg" as GlobalUIManager
import "../GlobalData/TeamData.fcg" as TeamData
import "../GlobalData/GlobalSafeZones.fcg" as GlobalSafeZones

graph GlobalPreparationPhaseManager {

    event OnPhaseStart(phase entity<Phase>) {
        if phase<Phase>.Index == EPhase.__Before6Combat__ {
            // LogInfo("<GlobalPreparationPhaseManager.fcg>: Starting Preparation Phase. Init necessary data...") // Debug Info
            wait InitDataBeforeCombat(phase<Phase>.Duration); 
        }
    }
    event OnPhaseEnd(phase entity<Phase>) {
        if phase<Phase>.Index == EPhase.__Before6Combat__{
            wait globalEntity<GlobalUIManager>.CreateRoundInfoHUD(); // Create the round info HUD for all players
        }
    }
    // UTILS 
    /* Initialize data before combat
    This function sets up all necessary data and states for players before the combat phase begins.
    More detail inside the function implementation.
    */
    async func InitDataBeforeCombat(duration int) {
        // LogError(globalEntity<TeamData>.GetSortedTeamList()); // Debug Info
        // WaitForMillisecond(100)
        start globalEntity<GlobalUIManager>.EnableTooltips();
        for index, player in GetAllPlayers() {
            player<PlayerController>.SetZeroGravityStatus(player, false); // Set back the gravity for the player
            globalEntity<PlayersTimerUI>.SetPlayerTimer(duration / 1000); // Set the player's timer
            globalEntity<PlayersTimerUI>.SetTimerVisibility(true); // Set the timer visibility to true
            SetInvincibilityStatus(player, true); // Set the invincibility status for the player
            // SetMovementStatus(false); // Disable all players' movement in preparation phase
            // player<PlayerController>.AddMedKitEachRound(player); // Add Med Kit in each round
        }
        // if(globalEntity<CombatRoundCounter>.GetCount() == 0) {
        //     start globalEntity<GlobalUIManager>.SetAllPlayersTooltipStatus(true, 15000);
        // }
        globalEntity<PlayersShopIcon>.ToggleAllIcons(true) // Show all players' shop icons
        InitPlayerWeapons(); // Initialize player weapons
        globalEntity<CombatRoundCounter>.IncreaseCount(); // Increment the round counter
        var randomStageIndex = RandomInt(0, globalEntity<GlobalGameManager>.availableStages)
        LogError("Random Stage Index: " + globalEntity<GlobalGameManager>.availableStages + " - " + randomStageIndex); // Debug Info
        var spawnPositions = globalEntity<SpawnPoints>.GetSpawnPositionForRound(randomStageIndex) // Get all spawn positions from the scene
        globalEntity<SpawnPoints>.SetSpawnPointsActiveStatusForRound(randomStageIndex, true);
        for index, team in GetAllTeams() {
            var randomIndex = RandomInt(0, List.Length(spawnPositions)) // Get a random index in spawn list
            var randomPosition = spawnPositions[randomIndex] // Get the random spawn position
            // Use a loop to make sure all players in the team are teleported to the same position
            for index, player in team<Team>.AllTeammates {
                ReviveAtNextFrame(player) // Revive the player at the next frame
                Teleport(player, randomPosition, Vector3{0, 0, 0}) // Teleport the player to the random position
            }
            RemoveAt(spawnPositions, randomIndex) // Remove the used spawn position from the list
        }
        WaitForMillisecond(duration) // Wait for the specified duration
        globalEntity<PlayersTimerUI>.SetTimerVisibility(false); // Hide the timer UI after the preparation phase
        globalEntity<GlobalSafeZones>.OpenSafeZone(randomStageIndex); // Open the safe zone for the current round
        for index, player in GetAllPlayers() {
            player<Player>.EP = 200; // Set player's initial EP to 200 every round
            SetInvincibilityStatus(player, false); // Disable invincibility for all players
        }
        globalEntity<PlayersShopIcon>.ToggleAllIcons(false); // Hide all players' shop icons
        globalEntity<SpawnPoints>.SetSpawnPointsActiveStatusForRound(randomStageIndex, false); // Disable all spawn points
    }
    /* Set Invincibility Status for a player
    @param player The player entity
    @param invincible The invincibility status to set
    */
    func SetInvincibilityStatus(player entity<Player>, invincible bool) {
        player<Player>.Invincible = invincible;
    }

    /* Set Movement Status for all players
    @param canMove The movement status to set
    */
    func SetMovementStatus(canMove bool) {
        SetAllPlayersMoveStatus(canMove);
    }

    // Add a M590 and a random rifle for each player
    func InitPlayerWeapons() {
        var rifleList = List<EResItem>{EResItem.AK47, EResItem.SCAR, EResItem.FAMAS, EResItem.XM8, EResItem.GROZAX, EResItem.AUG, EResItem.M4A1}
        var randomRifle = rifleList[RandomInt(0, List.Length(rifleList))]
        var m590 = EResItem.M590
        for index, player in GetAllPlayers(){
            // Add a list of items to player. Before add, delete all existing items
            player<PlayerController>.AddItemToPlayer(player, EResItem.VestLv3, 1)
            player<PlayerController>.AddItemToPlayer(player, EResItem.HelmetLv3, 1)
            if GetItemCount(player, EResItem.GlooWall as ItemIDType) != 0 && globalEntity<CombatRoundCounter>.GetCount() != 0 {
                DestroyItem(player, EResItem.GlooWall as ItemIDType, GetItemCount(player, EResItem.GlooWall as ItemIDType)) // Destroy the item when added
            }
            // player<PlayerController>.AddItemToPlayer(player, EResItem.GlooWall, 8)
            AddItem(player, EResItem.GlooWall as ItemIDType, 8, out var newGlooWall) // Add the item to the player
            if GetItemCount(player, EResItem.MedKit as ItemIDType) != 0 {
                DestroyItem(player, EResItem.MedKit as ItemIDType, GetItemCount(player, EResItem.MedKit as ItemIDType)) // Destroy the item when added
            }
            AddItem(player, EResItem.MedKit as ItemIDType, 4, out var newItem) // Add the item to the player
            if GetItemCount(player, EResItem.SuperMed as ItemIDType) != 0 {
                DestroyItem(player, EResItem.SuperMed as ItemIDType, GetItemCount(player, EResItem.SuperMed as ItemIDType)) // Destroy the item when added
            }
            AddItem(player, EResItem.SuperMed as ItemIDType, 1, out var newSuperMed) // Add the item to the player
            if GetItemCount(player, EResItem.Inhaler as ItemIDType) != 0 {
                DestroyItem(player, EResItem.Inhaler as ItemIDType, GetItemCount(player, EResItem.Inhaler as ItemIDType)) // Destroy the item when added
            }
            AddItem(player, EResItem.Inhaler as ItemIDType, 10, out var newInhaler) // Add the item to the player
            if GetItemCount(player, EResItem.Grenade as ItemIDType) != 0 {
                DestroyItem(player, EResItem.Grenade as ItemIDType, GetItemCount(player, EResItem.Grenade as ItemIDType)) // Destroy the item when added
            }
            AddItem(player, EResItem.Grenade as ItemIDType, 2, out var newGrenade) // Add the item to the player
            if GetItemCount(player, EResItem.FlashFreeze as ItemIDType) != 0 {
                DestroyItem(player, EResItem.FlashFreeze as ItemIDType, GetItemCount(player, EResItem.FlashFreeze as ItemIDType)) // Destroy the item when added
            }
            AddItem(player, EResItem.FlashFreeze as ItemIDType, 1, out var newFlashFreeze) // Add the item to the player
            if GetItemCount(player, EResItem.GlooMelter as ItemIDType) != 0 {
                DestroyItem(player, EResItem.GlooMelter as ItemIDType, GetItemCount(player, EResItem.GlooMelter as ItemIDType)) // Destroy the item when added
            }
            AddItem(player, EResItem.GlooMelter as ItemIDType, 2, out var newGlooMelter) // Add the item to the player
            if(globalEntity<CombatRoundCounter>.GetCount() == 0) {
                player<PlayerController>.AddItemToPlayer(player, m590, 1) // Add M590 to the player
                player<PlayerController>.AddItemToPlayer(player, randomRifle, 1) // Add random rifle to the player
            }
        }
    }
}