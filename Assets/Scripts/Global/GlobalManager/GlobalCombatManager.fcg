/* 
Global Combat Manager
This script manages all the interactions when inside the combat phase.
This is the replacement for GlobalRoundHandler.eca
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Combat.fcc" as Combat
import "../GlobalData/TeamsAlive.fcg" as TeamsAlive
import "LevelObject.fcc" as LevelObject
import "Workflow.fcc" as Workflow
import "List.fcc" as List
import "../GlobalData/CombatRoundCounter.fcg" as CombatRoundCounter
import "Player.fcc" as Player
graph GlobalCombatManager {
    teamsAlive List<Team>
    event OnRoundStart(roundIndex int) {
        if (roundIndex == 0) {
            teamsAlive = globalEntity<TeamsAlive>.GetAliveTeams() // Get the list of alive teams
            LogInfo("<GlobalCombatManager.fcg>: Round started, teams alive initialized") // Debug Info
        }
    }
    event OnPlayerBeEliminated(player entity<Player>) {
        CheckWinningCondition()
    }

    event OnPlayerQuit(player entity<Player>) {
        CheckWinningCondition()
    }

    func CheckWinningCondition() {
        var teamCount int = 0 
        var isTeamAliveList List<bool> = List<bool>{false, false, false}
        for index, team in GetAllTeams() {
            // for index, teammate in team<Team>.AllTeammates {
            //     if teammate == player {
            //         if team<Team>.IsAced {
            //             Remove(teamsAlive, team)
            //             if List.Length(teamsAlive) <= 1 {
            //                 // DispatchEvent(EndRound, team, List<object>{teamsAlive[0]}) // End the round if only one team is left
            //                 DispatchEvent(CombatEnd, thisEntity, List<object>{teamsAlive[0]})
            //             }
            //         }
            //     }
            // }
            if(!team<Team>.IsAced) {
                isTeamAliveList[index] = true
                teamCount = teamCount + 1
            }
        }
        if(teamCount <= 1) {
            for index, team in isTeamAliveList {
                if team == true {
                    LogInfo("<GlobalCombatManager.fcg>: Team " + index + " is the last team standing.")
                    DispatchEvent(CombatEnd, thisEntity, List<object>{GetAllTeams()[index]})
                    return
                }
            }
        }
        // LogError("No team win this round")
        DispatchEvent(NoTeamWinException, thisEntity, List<object>{})
        LogInfo("<GlobalCombatManager.fcg>: CheckWinningCondition completed, current alive teams: " + teamCount)
    }
}