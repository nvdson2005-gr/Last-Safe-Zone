/* 
Global Combat Manager
This script manages all the interactions when inside the combat phase.
This is the replacement for GlobalRoundHandler.eca
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Combat.fcc" as Combat
import "../GlobalData/TeamsAlive.fcg" as TeamsAlive
import "LevelObject.fcc" as LevelObject
import "Workflow.fcc" as Workflow
import "List.fcc" as List
import "../GlobalData/CombatRoundCounter.fcg" as CombatRoundCounter
import "Player.fcc" as Player
import "../GlobalData/TeamData.fcg" as TeamData
import "Hostility.fcc" as Hostility
import "../GlobalManager/GlobalUIManager.fcg" as GlobalUIManager
import "../GlobalData/TargetAndCombatTimer.fcg" as TargetAndCombatTimer
graph GlobalCombatManager {
    teamsAlive List<Team> = List<Team>{} // List of teams that are still alive in the combat phase

    // When the combat phase starts, activate the timer also
    event OnPhaseStart(phase entity<Phase>) {
        if phase<Phase>.Index == EPhase.Combat {
            globalEntity<TargetAndCombatTimer>.StartTimer()
        }
    }
    event OnRoundStart(roundIndex int) {
        if (roundIndex == 0) {
            teamsAlive = globalEntity<TeamsAlive>.GetAliveTeams() // Get the list of alive teams
            // LogInfo("<GlobalCombatManager.fcg>: Round started, teams alive initialized") // Debug Info
        }
    }
    event OnPlayerBeEliminated(player entity<Player>) {
        // CheckEndCombatCondition()
        globalEntity<GlobalUIManager>.UpdateMiniScoreboard() // Update the mini scoreboard UI after a player is eliminated to update current alives
    }
    event OnPlayerQuit(player entity<Player>) {
        // CheckEndCombatCondition()
        globalEntity<GlobalUIManager>.UpdateMiniScoreboard() // Update the mini scoreboard UI after a player is eliminated to update current alives
    }

    event OnPlayerEliminate(player entity<Player>, eliminatedPlayer entity<Player>, damageType DamageType) {
        if damageType != DamageType.ElectricZone && damageType != DamageType.Falling && damageType != DamageType.Exit && damageType != DamageType.Disconnect  {
            // globalEntity<TeamData>.SetTeamKills(player<Player>.HostTeam, globalEntity<TeamData>.GetTeamKills(player<Player>.HostTeam) + 1) 
            globalEntity<GlobalUIManager>.UpdateFullScoreBoard() // Update the full scoreboard UI after a player is eliminated
            globalEntity<GlobalUIManager>.UpdateMiniScoreboard() // Update the mini scoreboard UI after a player is eliminated to update current alives
        }
        // LogError(globalEntity<TeamData>.GetTeamKills(player<Player>.HostTeam) + " kills for team " + player<Player>.HostTeam<Entity>.Name)
    }

    func CheckEndCombatCondition() {
        var teamCount int = 0 
        var isTeamAliveList List<bool> = List<bool>{false, false, false}
        for index, team in GetAllTeams() {
            // for index, teammate in team<Team>.AllTeammates {
            //     if teammate == player {
            //         if team<Team>.IsAced {
            //             Remove(teamsAlive, team)
            //             if List.Length(teamsAlive) <= 1 {
            //                 // DispatchEvent(EndRound, team, List<object>{teamsAlive[0]}) // End the round if only one team is left
            //                 DispatchEvent(CombatEnd, thisEntity, List<object>{teamsAlive[0]})
            //             }
            //         }
            //     }
            // }
            if(!team<Team>.IsAced) {
                // LogError("<GlobalCombatManager.fcg>: Team " + team<Entity> + " is still alive.")
                isTeamAliveList[index] = true
                teamCount = teamCount + 1
            }
        }
        if(teamCount <= 1) {
            for index, team in isTeamAliveList {
                if team == true {
                    globalEntity<TargetAndCombatTimer>.ResetTimer()
                    LogInfo("<GlobalCombatManager.fcg>: Team " + index + " is the last team standing.")
                    DispatchEvent(CombatEnd, thisEntity, List<object>{GetAllTeams()[index]})
                    return
                }
            }
        }
        if(teamCount == 0) {
            // LogError("No team win this round")
            globalEntity<TargetAndCombatTimer>.ResetTimer()
            DispatchEvent(NoTeamWinException, thisEntity, List<object>{})
        }
        // LogInfo("<GlobalCombatManager.fcg>: CheckWinningCondition completed, current alive teams: " + teamCount)
    }
}