import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Hud.fcc" as Hud
import "Map.fcc" as Map
import "Workflow.fcc" as Workflow
graph PlayersTutorial {
    //Executed when entity is created
    tutorialUIDict Map<entity<Player>, entity<CustomUI>> // Map to associate players with their tutorial UIs
    currentUISceneDict Map<entity<Player>, int> // Map to track the current scene index for each player's tutorial UI
    sceneList List<EResUITutorial> = {EResUITutorial.Scene1, EResUITutorial.Scene2, EResUITutorial.Scene3, EResUITutorial.Scene4, EResUITutorial.Scene5}
    event OnAwake() {
        tutorialUIDict = Map<entity<Player>, entity<CustomUI>>{} // Initialize the map of players' tutorial UIs at the start of the game
        currentUISceneDict = Map<entity<Player>, int>{} // Initialize the map of players' current scene indices at the start of the game
    }

    func RegisterPlayer(player entity<Player>){
        CreateCustomUI(out var createdUI, player, EResUI.Tutorial)
        tutorialUIDict[player] = createdUI
        currentUISceneDict[player] = 0 // Set the initial scene index for the player's tutorial UI
        var w = GetWidgetFromCustomUI(player, createdUI, EResUITutorial.Scene1 as CustomUIWidgetID)
        // SetActive(w, true)
        // w<UIWidget>.Active = true // Activate the widget when the tutorial button in GameInfo.ui is pressed
        // LogError(w<UIWidget>.Active)
    }

    func ActivateTutorial(player entity<Player>) {
        if ContainKey(tutorialUIDict, player) {
            var sceneW = GetWidgetFromCustomUI(player, tutorialUIDict[player], EResUITutorial.Scene1 as CustomUIWidgetID)
            var changeSceneW = GetWidgetFromCustomUI(player, tutorialUIDict[player], EResUITutorial.ChangeSceneButton as CustomUIWidgetID) 
            var skipW = GetWidgetFromCustomUI(player, tutorialUIDict[player], EResUITutorial.SkipButton as CustomUIWidgetID)
            sceneW<UIWidget>.Active = true // Show the first scene widget when the tutorial is activated
            changeSceneW<UIWidget>.Active = true // Show the change scene button when the tutorial is activated
            skipW<UIWidget>.Active = true // Show the skip button when the tutorial is activated
            currentUISceneDict[player] = 0 // Reset the current scene index to 0
        } else {
            LogError("Player does not have a tutorial UI registered.")
        }
    }

    func ChangeScene(player entity<Player>) {
        if ContainKey(tutorialUIDict, player) && ContainKey(currentUISceneDict, player) {
            if currentUISceneDict[player] >= 4 {
                // DestroyCustomUI(tutorialUIDict[player]) // Destroy the tutorial UI when all scenes are completed
                SkipTutorial(player) // Temporarily call to this to disable tutorial when tutorial finishes
                return
                // w<UIWidget>.Active = false
                // currentUISceneDict[player] = 0 // Reset the current scene index to 0
            }
            var w = GetWidgetFromCustomUI(player, tutorialUIDict[player], sceneList[currentUISceneDict[player]] as CustomUIWidgetID)
            w<UIWidget>.Active = false // Hide the current scene widget
            currentUISceneDict[player] = currentUISceneDict[player] + 1
            w = GetWidgetFromCustomUI(player, tutorialUIDict[player], sceneList[currentUISceneDict[player]] as CustomUIWidgetID)
            w<UIWidget>.Active = true // Show the next scene widget
        }
    }

    func SkipTutorial(player entity<Player>) {
        if ContainKey(tutorialUIDict, player) {
            // DestroyCustomUI(tutorialUIDict[player]) // Destroy the tutorial UI when skipped
            var w = GetWidgetFromCustomUI(player, tutorialUIDict[player], sceneList[currentUISceneDict[player]] as CustomUIWidgetID)
            w<UIWidget>.Active = false
            var sceneW = GetWidgetFromCustomUI(player, tutorialUIDict[player], EResUITutorial.Scene1 as CustomUIWidgetID)
            var changeSceneW = GetWidgetFromCustomUI(player, tutorialUIDict[player], EResUITutorial.ChangeSceneButton as CustomUIWidgetID) 
            var skipW = GetWidgetFromCustomUI(player, tutorialUIDict[player], EResUITutorial.SkipButton as CustomUIWidgetID)
            sceneW<UIWidget>.Active = false // Show the first scene widget when the tutorial is activated
            changeSceneW<UIWidget>.Active = false // Show the change scene button when the tutorial is activated
            skipW<UIWidget>.Active = false // Show the skip button when the tutorial is activated
            currentUISceneDict[player] = 0 // Reset the current scene index to 0
        }
    }

    event OnPhaseEnd(phase entity<Phase>) {
        if phase<Phase>.Index == EPhase.Preparation {
            // LogInfo("<PlayersTutorial.fcg>: Preparation phase ended. Destroying all players' tutorial UIs.")
            for player, ui in tutorialUIDict {
                DestroyCustomUI(ui) // Destroy the tutorial UI for each player at the end of the preparation phase
            }
            tutorialUIDict = Map<entity<Player>, entity<CustomUI>>{} // Clear the map of players' tutorial UIs
            currentUISceneDict = Map<entity<Player>, int>{} // Clear the map of players' current scene indices
        } 
    }
}