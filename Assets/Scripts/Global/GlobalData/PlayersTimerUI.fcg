/* PlayersTimerUI.fcg
   Description: This script handles the player timer UI functionality in the game.
   It is responsible for managing the player's timer UI and its interactions.
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Hud.fcc" as Hud
import "Map.fcc" as Map
import "Player.fcc" as Player
import "Workflow.fcc" as Workflow

graph PlayersTimerUI {
    // playersTimerUI Map<entity<Player>, entity<UIPhaseTimer>> // Map to associate players with their timer UIs

    playersTimerUI Map<entity<Player>, entity<UICountdownReminder>> // Map to associate players with their timer UIs
    event OnGameStart() {
        // playersTimerUI = Map<entity<Player>, entity<UIPhaseTimer>>{} // Initialize the map of players' timer UIs at the start of the game
        playersTimerUI = Map<entity<Player>, entity<UICountdownReminder>>{} // Initialize the map of players' timer UIs at the start of the game
        // LogInfo("<PlayersTimerUI.fcg>: Game started, players' timer UI initialized") // Debug Info
    }
    /* Register the player's timer UI.
       This function associates a player with their timer UI in the map.
       @param player: The player entity whose timer UI will be registered
       @return: Returns true if the operation was successful
    */
    func RegisterTimerUI(player entity<Player>) bool {
        if (playersTimerUI == nil) {
            // playersTimerUI = Map<entity<Player>, entity<UIPhaseTimer>>{} // Initialize the map if it is null
            playersTimerUI = Map<entity<Player>, entity<UICountdownReminder>>{} // Initialize the map if it is null
        }
        if (!ContainKey(playersTimerUI, player)) {
            // CreateBuiltInUI(out var timerUI, player, EResInternalHud.StageCountdownHUD as BuiltInUIType) // Create a new timer UI for the player
            CreateBuiltInUI(out var timerUI, player, EResInternalHud.CountdownReminderHud as BuiltInUIType) // Create a new timer UI for the player
            // playersTimerUI[player] = timerUI as entity<UIPhaseTimer> // Associate the player with their timer UI
            playersTimerUI[player] = timerUI as entity<UICountdownReminder> // Associate the player with their timer UI
            playersTimerUI[player]<UICountdownReminder>.IsVisible = false // Set the timer UI to be invisible initially
            playersTimerUI[player]<UICountdownReminder>.Description = "Combat starts in" // Set the description for the timer UI
            // LogInfo("<PlayersTimerUI.fcg>: Registered timer UI for player: " + player<Entity>.Name) // Debug Info
            // LogInfo("<PlayersTimerUI.fcg>: Timer UI created for player: " + playersTimerUI[player]) // Debug Info
            return true // Return true to indicate the operation was successful
        } else {
            LogWarning("<PlayersTimerUI.fcg>: Timer UI already registered for player: " + player<Entity>.Name) // Warning Info
            return false // Return false to indicate the operation was unsuccessful
        }
    }
    /* Set the player's timer UI.
       This function sets the base time and duration for the player's timer UI.
       @param time: The time in seconds to set for the player's timer UI
       @return: Returns true if the operation was successful
    */
    func SetPlayerTimer(time int) bool {
        for index, player in GetAllPlayers() {
            if (ContainKey(playersTimerUI, player)) {
                // playersTimerUI[player]<UIPhaseTimer>.BaseTime = globalEntity<Global>.GameTimeCount / 1000 // Set the base time for the player's timer UI
                // playersTimerUI[player]<UIPhaseTimer>.Duration = time // Set the duration for the player's timer UI
                playersTimerUI[player]<UICountdownReminder>.BaseTime = globalEntity<Global>.GameTimeCount / 1000 // Set the base time for the player's timer UI
                playersTimerUI[player]<UICountdownReminder>.Duration = time // Set the duration for the player's timer UI
                // LogInfo("<PlayersTimerUI.fcg>: Set timer for player: " + player<Entity>.Name) // Debug Info
            } else {
                LogWarning("<PlayersTimerUI.fcg>: No timer UI found for player: " + player<Entity>.Name) // Warning Info
            }
        }
        return true // Return true to indicate the operation was successful
    }

    /* Set the visibility of the player's timer UI.
       This function sets the visibility of each player's timer UI based on the provided boolean value.
       @param status: A boolean indicating whether to show or hide the timer UI
       @return: Returns true if the operation was successful
    */
    func SetTimerVisibility(status bool) bool {
        for index, player in GetAllPlayers() {
            if(ContainKey(playersTimerUI, player)) {
                // playersTimerUI[player]<UIPhaseTimer>.IsVisible = status // Set the visibility of the player's timer UI
                playersTimerUI[player]<UICountdownReminder>.IsVisible = status // Set the visibility of the player's timer UI
                // LogInfo("<PlayersTimerUI.fcg>: Set timer visibility for player: " + player<Entity>.Name + " to " + status) // Debug Info
            } else {
                LogWarning("<PlayersTimerUI.fcg>: No timer UI found for player: " + player<Entity>.Name) // Warning Info
            }
        }
        return true // Return true to indicate the operation was successful
    }
}