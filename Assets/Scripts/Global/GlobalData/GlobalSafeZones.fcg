/*
Global Safe Zones Manager
Handles all the necessary actions related to safe zones in the game.
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Player.fcc" as Player
import "LevelObject.fcc" as LevelObject
import "SafeZone.fcc" as SafeZone
import "Map.fcc" as Map
import "Math.fcc" as Math
import "List.fcc" as List
import "Time.fcc" as Time
import "AI.fcc" as AI
import "../GlobalManager/GlobalGameManager.fcg" as GlobalGameManager
import "Workflow.fcc" as Workflow
graph GlobalSafeZones {
    // safeZonesDict Map<int, entity<SafeZone>> // The dict used to store safe zones, with the key is the round id, goes with the spawn id, and the value is the SafeZone entity
    // safeZoneEndPointDict Map<int, entity<SafeZone>> // The dict used to store safe zone end points, with the key is the round id, goes with the spawn id, and the value is the SafeZone entity
    safeZoneDefaultDmg int = 40
    safeZoneStartPoints Map<int, Vector3> = Map<int, Vector3>{}
    safeZoneEndPoints Map<int, List<entity<Entity>>> = Map<int, List<entity<Entity>>>{}
    safeZoneInitRadius Map<int, float> = Map<int, float>{}
    safeZoneStartShrinkTimes Map<int, int> = Map<int, int>{}
    safeZonesShrinkDuration Map<int, int> = Map<int, int>{}
    mainSafeZone entity<Entity>
    mainSafeZoneEnd entity<Entity>
    // Register all safe zones entities when the game starts
    event OnAwake() {
    }
    event OnGameStart() {
        mainSafeZone = EResSceneNewScene.CustomSafeZone as entity<Entity>
        mainSafeZoneEnd = EResSceneNewScene.SafeZoneEndPoint as entity<Entity>
        safeZoneInitRadius[0] = 25.0
        safeZoneInitRadius[1] = 25.0
        safeZoneInitRadius[2] = 40.0
        safeZoneInitRadius[3] = 40.0
        safeZoneInitRadius[4] = 40.0
        safeZoneInitRadius[5] = 40.0
        safeZoneInitRadius[6] = 50.0
        safeZoneStartShrinkTimes[0] = globalEntity<GlobalGameManager>.prepPhaseDuration + 5 
        safeZoneStartShrinkTimes[1] = globalEntity<GlobalGameManager>.prepPhaseDuration + 10 
        safeZoneStartShrinkTimes[2] = globalEntity<GlobalGameManager>.prepPhaseDuration
        safeZoneStartShrinkTimes[3] = globalEntity<GlobalGameManager>.prepPhaseDuration + 3
        safeZoneStartShrinkTimes[4] = globalEntity<GlobalGameManager>.prepPhaseDuration + 5
        safeZoneStartShrinkTimes[5] = globalEntity<GlobalGameManager>.prepPhaseDuration + 5 
        safeZoneStartShrinkTimes[6] = globalEntity<GlobalGameManager>.prepPhaseDuration + 5 
        safeZonesShrinkDuration[0] = 55
        safeZonesShrinkDuration[1] = 50
        safeZonesShrinkDuration[2] = 60
        safeZonesShrinkDuration[3] = 60
        safeZonesShrinkDuration[4] = 55
        safeZonesShrinkDuration[5] = 55
        safeZonesShrinkDuration[6] = 60 
        safeZoneStartPoints[0] = (EResSceneNewScene.StartPos1 as entity<Entity>)<Transform>.Position
        safeZoneStartPoints[1] = (EResSceneNewScene.StartPos2 as entity<Entity>)<Transform>.Position
        safeZoneStartPoints[2] = (EResSceneNewScene.StartPos3 as entity<Entity>)<Transform>.Position
        safeZoneStartPoints[3] = (EResSceneNewScene.StartPos4 as entity<Entity>)<Transform>.Position
        safeZoneStartPoints[4] = (EResSceneNewScene.StartPos5 as entity<Entity>)<Transform>.Position
        safeZoneStartPoints[5] = (EResSceneNewScene.StartPos6 as entity<Entity>)<Transform>.Position
        safeZoneStartPoints[6] = (EResSceneNewScene.StartPos7 as entity<Entity>)<Transform>.Position
        safeZoneEndPoints[0] = GetChildren(EResSceneNewScene.EndPos1List as entity<Entity>)
        safeZoneEndPoints[1] = GetChildren(EResSceneNewScene.EndPos2List as entity<Entity>)
        safeZoneEndPoints[2] = GetChildren(EResSceneNewScene.EndPos3List as entity<Entity>)
        safeZoneEndPoints[3] = GetChildren(EResSceneNewScene.EndPos4List as entity<Entity>)
        safeZoneEndPoints[4] = GetChildren(EResSceneNewScene.EndPos5List as entity<Entity>)
        safeZoneEndPoints[5] = GetChildren(EResSceneNewScene.EndPos6List as entity<Entity>)
        safeZoneEndPoints[6] = GetChildren(EResSceneNewScene.EndPos7List as entity<Entity>)
    }

    func SetStartShrinkTime(prepDuration int){
        safeZoneStartShrinkTimes[0] = prepDuration + 5
        safeZoneStartShrinkTimes[1] = prepDuration + 10
        safeZoneStartShrinkTimes[2] = prepDuration
        safeZoneStartShrinkTimes[3] = prepDuration + 3
        safeZoneStartShrinkTimes[4] = prepDuration + 5
        safeZoneStartShrinkTimes[5] = prepDuration + 5
        safeZoneStartShrinkTimes[6] = prepDuration + 5
    }

    /* Open a specific safe zone
    @param safezoneId The ID of the safe zone to open, which goes with the respective spawn point id
    */
    async func OpenSafeZone(safezoneId int) {
        // if ContainKey(safeZonesDict, safezoneId) {
        //     SetActive(safeZonesDict[safezoneId], true) // Activate the safe zone
        //     safeZonesDict[safezoneId]<Visibility>.IsVisible = true // Set safe zone's visibility to true
        //     safeZonesDict[safezoneId]<SafeZone>.DamageValue = 40 // Set the damage to 40
        // } else {
        //     // Log an error if the safe zone ID is not found
        //     LogError("Safe zone not found: " + safezoneId)
        //     return
        // }

        // // Check to disable all other safe zones
        // // Including inactivate other safe zones, set their damage value to 0 (to make sure no overlap damage between safe zones) and visibility to false
        // for index, safeZone in safeZonesDict {
        //     if index != safezoneId {
        //         SetActive(safeZone, false)
        //         safeZonesDict[index]<SafeZone>.DamageValue = 0
        //         safeZonesDict[index]<Visibility>.IsVisible = false
        //     }
        // }
    }

    func SetSafeZoneStatus(status bool) {
        SetActive(mainSafeZone, status)
    }

    func MoveSafeZoneToIndex(index int) {
        LogError("Safe Zone Details before : " + mainSafeZone<Transform>.Position + ", " + mainSafeZone<SafeZone>.StartRadius + ", " + mainSafeZone<SafeZone>.EndRadius)
        mainSafeZone<Transform>.Position = safeZoneStartPoints[index]
        var randomEndPoint = RandomInt(0, List.Length(safeZoneEndPoints[index]))
        var endPointPosition = safeZoneEndPoints[index][randomEndPoint] as entity<Transform>
        mainSafeZoneEnd<Transform>.Position = endPointPosition<Transform>.Position
        // mainSafeZone<SafeZone>.StartRadius = safeZoneInitRadius[index]
        // mainSafeZone<SafeZone>.DamageValue = 40

        LogError("Safe Zone Details after: " + mainSafeZone<Transform>.Position + ", " + mainSafeZone<SafeZone>.StartRadius + ", " + mainSafeZone<SafeZone>.EndRadius + " " + mainSafeZoneEnd<Transform>.Position + " " + endPointPosition)
        // mainSafeZone<SafeZone>.ShrinkDuration = safeZonesShrinkDuration[index]
        // mainSafeZone<SafeZone>.ShrinkStartTime = safeZoneStartShrinkTimes[index]
        // mainSafeZone<SafeZone>.ShrinkStartTime = 20000
        // mainSafeZone<SafeZone>.DamageValue = safeZoneDamageValues[index]
        // mainSafeZone<SafeZone>.DamageTimeInterval = 2000
        // mainSafeZone<SafeZone>.EndRadius = 0
    }

    async func ActivateSafeZone(index int){
        var randomEndPoint = RandomInt(0, List.Length(safeZoneEndPoints[index]))
        var endPointPosition = safeZoneEndPoints[index][randomEndPoint] as entity<Transform>
        EnableSafeZone(safeZoneStartPoints[index], safeZoneInitRadius[index], 90, safeZonesShrinkDuration[index], safeZoneDefaultDmg)
        // WaitForMillisecond(globalEntity<GlobalGameManager>.prepPhaseDuration * 1000)
        LogError(safeZoneStartShrinkTimes[index])
        WaitForMillisecond(safeZoneStartShrinkTimes[index] * 1000)
        DisableSafeZone()
        LogError("Safe Zone activated: " + safeZoneStartPoints[index] + " to " + endPointPosition<Transform>.Position + " with radius " + safeZoneInitRadius[index] + " in duration " + safeZonesShrinkDuration[index])
        EnableMovingSafeZone(safeZoneStartPoints[index], endPointPosition<Transform>.Position, safeZoneInitRadius[index], 0, safeZonesShrinkDuration[index], safeZoneDefaultDmg)
    }
}