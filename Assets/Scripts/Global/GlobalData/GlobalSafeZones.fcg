/*
Global Safe Zones Manager
Handles all the necessary actions related to safe zones in the game.
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Player.fcc" as Player
import "LevelObject.fcc" as LevelObject
import "SafeZone.fcc" as SafeZone
import "Map.fcc" as Map

graph GlobalSafeZones {
    // safeZonesDict Map<int, entity<SafeZone>> // The dict used to store safe zones, with the key is the round id, goes with the spawn id, and the value is the SafeZone entity
    // safeZoneEndPointDict Map<int, entity<SafeZone>> // The dict used to store safe zone end points, with the key is the round id, goes with the spawn id, and the value is the SafeZone entity
    safeZoneStartPoints Map<int, Vector3> = Map<int, Vector3>{}
    safeZoneEndPoints Map<int, List<entity>> = Map<int, List<entity>>{}
    safeZoneInitRadius Map<int, float> = Map<int, float>{}
    safeZoneDamageValues Map<int, int> = Map<int, int>{}
    safeZoneStartShrinkTimes Map<int, int> = Map<int, int>{}
    safeZonesShrinkDuration Map<int, int> = Map<int, int>{}
    mainSafeZone entity<Entity>
    mainSafeZoneEnd entity<Entity>
    // Register all safe zones entities when the game starts
    event OnAwake() {
        mainSafeZone = EResSceneNewScene.CustomSafeZone as entity<Entity>
        mainSafeZoneEnd = EResSceneNewScene.SafeZoneEndPoint as entity<Entity>
        safeZoneInitRadius[0] = 30.0
        safeZoneInitRadius[1] = 30.0
        safeZoneInitRadius[2] = 40.0
        safeZoneInitRadius[3] = 40.0
        safeZoneInitRadius[4] = 40.0
        safeZoneInitRadius[5] = 40.0
        safeZoneInitRadius[6] = 40.0
        safeZonesShrinkDuration[0] = 60000
        safeZonesShrinkDuration[1] = 60000
        safeZonesShrinkDuration[2] = 70000
        safeZonesShrinkDuration[3] = 60000
        safeZonesShrinkDuration[4] = 55000
        safeZonesShrinkDuration[5] = 50000
        safeZonesShrinkDuration[6] = 50000
        var startPos1 = EResSceneNewScene.StartPos1
        var startPos2 = EResSceneNewScene.StartPos2
        var startPos3 = EResSceneNewScene.StartPos3
        var startPos4 = EResSceneNewScene.StartPos4
        var startPos5 = EResSceneNewScene.StartPos5
        var startPos6 = EResSceneNewScene.StartPos6
        var startPos7 = EResSceneNewScene.StartPos7
        var endPosList1 = EResSceneNewScene.EndPos1List
        var endPosList2 = EResSceneNewScene.EndPos2List
        var endPosList3 = EResSceneNewScene.EndPos3List
        var endPosList4 = EResSceneNewScene.EndPos4List
        var endPosList5 = EResSceneNewScene.EndPos5List
        var endPosList6 = EResSceneNewScene.EndPos6List
        var endPosList7 = EResSceneNewScene.EndPos7List
        safeZoneStartPoints[0] = startPos1<Transform>.Position
        safeZoneStartPoints[1] = startPos2<Transform>.Position
        safeZoneStartPoints[2] = startPos3<Transform>.Position
        safeZoneStartPoints[3] = startPos4<Transform>.Position
        safeZoneStartPoints[4] = startPos5<Transform>.Position
        safeZoneStartPoints[5] = startPos6<Transform>.Position
        safeZoneStartPoints[6] = startPos7<Transform>.Position
        safeZoneEndPoints[0] = GetChildren(endPosList1)
        safeZoneEndPoints[1] = GetChildren(endPosList2)
        safeZoneEndPoints[2] = GetChildren(endPosList3)
        safeZoneEndPoints[3] = GetChildren(endPosList4)
        safeZoneEndPoints[4] = GetChildren(endPosList5)
        safeZoneEndPoints[5] = GetChildren(endPosList6)
        safeZoneEndPoints[6] = GetChildren(endPosList7)
        // safeZonesDict[3] = EResSceneNewScene.SafeZone4 as entity<SafeZone> // Register the fourth safe zone
        // safeZonesDict[4] = EResSceneNewScene.SafeZone5 as entity<SafeZone> // Register the fifth safe zone
        // safeZonesDict[5] = EResSceneNewScene.SafeZone6 as entity<SafeZone> // Register the sixth safe zone
        // safeZonesDict[6] = EResSceneNewScene.SafeZone7 as entity<SafeZone> // Register the seventh safe zone

        // safeZoneEndPointDict[0] = EResSceneNewScene.SafeZoneEndPoint1 as entity<SafeZone> // Register the first safe zone end point
        // safeZoneEndPointDict[1] = EResSceneNewScene.SafeZoneEndPoint2 as entity<SafeZone> // Register the second safe zone end point
        // safeZoneEndPointDict[2] = EResSceneNewScene.SafeZoneEndPoint3 as entity<SafeZone> // Register the third safe zone end point
        // safeZoneEndPointDict[3] = EResSceneNewScene.SafeZoneEndPoint4 as entity<SafeZone> // Register the fourth safe zone end point
        // safeZoneEndPointDict[4] = EResSceneNewScene.SafeZoneEndPoint5 as entity<SafeZone> // Register the fifth safe zone end point
        // safeZoneEndPointDict[5] = EResSceneNewScene.SafeZoneEndPoint6 as entity<SafeZone> // Register the sixth safe zone end point
        // safeZoneEndPointDict[6] = EResSceneNewScene.SafeZoneEndPoint7 as entity<SafeZone> // Register the seventh safe zone end point
        // // Set initial states for all safe zones
        // for index, safeZone in safeZonesDict {
        //     SetActive(safeZone, false) // Set all safe zones to inactive at the start
        //     safeZone<SafeZone>.DamageValue = 0 // Set the damage value to 0 at the start
        //     safeZone<Visibility>.IsVisible = false // Set the visibility of the safe zone to false at the start
        // }
    }

    /* Open a specific safe zone
    @param safezoneId The ID of the safe zone to open, which goes with the respective spawn point id
    */
    async func OpenSafeZone(safezoneId int) {
        // if ContainKey(safeZonesDict, safezoneId) {
        //     SetActive(safeZonesDict[safezoneId], true) // Activate the safe zone
        //     safeZonesDict[safezoneId]<Visibility>.IsVisible = true // Set safe zone's visibility to true
        //     safeZonesDict[safezoneId]<SafeZone>.DamageValue = 40 // Set the damage to 40
        // } else {
        //     // Log an error if the safe zone ID is not found
        //     LogError("Safe zone not found: " + safezoneId)
        //     return
        // }

        // // Check to disable all other safe zones
        // // Including inactivate other safe zones, set their damage value to 0 (to make sure no overlap damage between safe zones) and visibility to false
        // for index, safeZone in safeZonesDict {
        //     if index != safezoneId {
        //         SetActive(safeZone, false)
        //         safeZonesDict[index]<SafeZone>.DamageValue = 0
        //         safeZonesDict[index]<Visibility>.IsVisible = false
        //     }
        // }
    }
}