/* Script: TeamsAlive.fcg
   Description: This script handles the teams alive functionality in the game.
   It is responsible for managing total current teams in the game.
   (DEPRACATED, NO USE)
*/
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "List.fcc" as List

graph TeamsAlive {
    teamsAlive List<Team>  // List to keep track of teams that are currently alive

    event OnGameStart() {
        teamsAlive = List<Team>{} // Initialize the list of alive teams at the start of the game
        // LogInfo("<TeamsAlive.fcg>: Game started, teams alive initialized") // Debug Info
    }
    /* Register a team as alive in the game.
       This function adds the team to the list of alive teams if it is not already present.
       @param team: The team entity to register
    */
    func RegisterTeam(team entity<Team>) bool {
        if(!Contain(teamsAlive, team)){
            Append(teamsAlive, team) // Add the team to the list of alive teams
            // LogInfo("<TeamsAlive.fcg>: Team registered: " + team<Entity>.Name) // Debug Info
            return true
        }
        LogWarning("<TeamsAlive.fcg>: Team already registered: " + team<Entity>.Name) // Debug Info
        return false
    }

    /* Unregister a team from the list of alive teams.
       This function removes the team from the list if it is currently registered.
       @param team: The team entity to unregister
    */
    func UnregisterTeam(team entity<Team>) {
        if(Contain(teamsAlive, team)){
            Remove(teamsAlive, team) // Remove the team from the list of alive teams
            // LogInfo("<TeamsAlive.fcg>: Team unregistered: " + team<Entity>.Name) // Debug Info
        }
    }

    // Get all of currently alive teams
    func GetAliveTeams() List<Team> {
        return teamsAlive // Return the list of currently alive teams
    }
}